enum NFTStandard {
    ERC721
    ERC1155
}

type NFTContract @entity {
    id: ID! # address
    standard: NFTStandard!
    owner: Bytes!
    name: String
    symbol: String
    royaltyFeeRecipient: Bytes!
    royaltyFee: BigInt!
    nfts: [NFT!]! @derivedFrom(field: "contract")
}

type NFT @entity {
    id: ID! # address:tokenId
    contract: NFTContract
    address: Bytes!
    tokenId: BigInt!
    tagNonce: BigInt!
    tagCount: Int!
    tags: [NFTTag!]! @derivedFrom(field: "nft")
    owners: [NFTOwner!]! @derivedFrom(field: "nft")
}

type NFTOwner @entity {
    id: ID! # address:tokenId:owner
    nft: NFT!
    owner: Bytes!
    amount: BigInt!
}

type NFTTag @entity {
    id: ID! # address:tokenId:tagNonce:index
    nft: NFT!
    content: String!
}

type SocialToken @entity {
    id: ID! # address
    owner: Bytes!
    name: String
    symbol: String
    dividendToken: Bytes!
    syncRecords: [SocialTokenSyncRecord!]! @derivedFrom(field: "token")
    withdrawals: [SocialTokenWithdrawal!]! @derivedFrom(field: "token")
}

type SocialTokenSyncRecord @entity {
    id: ID! # txHash:index
    token: SocialToken!
    increased: BigInt!
}

type SocialTokenWithdrawal @entity {
    id: ID! # txHash:index
    token: SocialToken!
    to: Bytes!
    amount: BigInt!
}

type BurnRecord @entity {
    id: ID! # txHash:index
    contract: Bytes!
    tokenId: BigInt
    amount: BigInt!
    label: BigInt!
    data: Bytes!
}

enum BidStatus {
    PENDING, CANCELLED, EXECUTED
}

type Bid @entity {
    id: ID! # hash
    exchange: Bytes!
    status: BidStatus!
    bidder: Bytes!
    amount: BigInt!
    price: BigInt!
    recipient: Bytes!
    referrer: Bytes!
}
